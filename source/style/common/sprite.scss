// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$paper-plane-name: 'paper-plane';
$paper-plane-x: 0px;
$paper-plane-y: 0px;
$paper-plane-offset-x: 0px;
$paper-plane-offset-y: 0px;
$paper-plane-width: 64px;
$paper-plane-height: 64px;
$paper-plane-total-width: 512px;
$paper-plane-total-height: 1460px;
$paper-plane-image: '../img/sprite.png';
$paper-plane: (0px, 0px, 0px, 0px, 64px, 64px, 512px, 1460px, '../img/sprite.png', 'paper-plane', );
$paper-plane-2x-name: 'paper-plane@2x';
$paper-plane-2x-x: 0px;
$paper-plane-2x-y: 564px;
$paper-plane-2x-offset-x: 0px;
$paper-plane-2x-offset-y: -564px;
$paper-plane-2x-width: 128px;
$paper-plane-2x-height: 128px;
$paper-plane-2x-total-width: 512px;
$paper-plane-2x-total-height: 1460px;
$paper-plane-2x-image: '../img/sprite.png';
$paper-plane-2x: (0px, 564px, 0px, -564px, 128px, 128px, 512px, 1460px, '../img/sprite.png', 'paper-plane@2x', );
$partners1-name: 'partners1';
$partners1-x: 0px;
$partners1-y: 64px;
$partners1-offset-x: 0px;
$partners1-offset-y: -64px;
$partners1-width: 200px;
$partners1-height: 100px;
$partners1-total-width: 512px;
$partners1-total-height: 1460px;
$partners1-image: '../img/sprite.png';
$partners1: (0px, 64px, 0px, -64px, 200px, 100px, 512px, 1460px, '../img/sprite.png', 'partners1', );
$partners2-name: 'partners2';
$partners2-x: 0px;
$partners2-y: 164px;
$partners2-offset-x: 0px;
$partners2-offset-y: -164px;
$partners2-width: 200px;
$partners2-height: 100px;
$partners2-total-width: 512px;
$partners2-total-height: 1460px;
$partners2-image: '../img/sprite.png';
$partners2: (0px, 164px, 0px, -164px, 200px, 100px, 512px, 1460px, '../img/sprite.png', 'partners2', );
$partners3-name: 'partners3';
$partners3-x: 0px;
$partners3-y: 264px;
$partners3-offset-x: 0px;
$partners3-offset-y: -264px;
$partners3-width: 200px;
$partners3-height: 100px;
$partners3-total-width: 512px;
$partners3-total-height: 1460px;
$partners3-image: '../img/sprite.png';
$partners3: (0px, 264px, 0px, -264px, 200px, 100px, 512px, 1460px, '../img/sprite.png', 'partners3', );
$partners4-name: 'partners4';
$partners4-x: 0px;
$partners4-y: 364px;
$partners4-offset-x: 0px;
$partners4-offset-y: -364px;
$partners4-width: 200px;
$partners4-height: 100px;
$partners4-total-width: 512px;
$partners4-total-height: 1460px;
$partners4-image: '../img/sprite.png';
$partners4: (0px, 364px, 0px, -364px, 200px, 100px, 512px, 1460px, '../img/sprite.png', 'partners4', );
$partners5-name: 'partners5';
$partners5-x: 0px;
$partners5-y: 464px;
$partners5-offset-x: 0px;
$partners5-offset-y: -464px;
$partners5-width: 200px;
$partners5-height: 100px;
$partners5-total-width: 512px;
$partners5-total-height: 1460px;
$partners5-image: '../img/sprite.png';
$partners5: (0px, 464px, 0px, -464px, 200px, 100px, 512px, 1460px, '../img/sprite.png', 'partners5', );
$puzzle-name: 'puzzle';
$puzzle-x: 0px;
$puzzle-y: 692px;
$puzzle-offset-x: 0px;
$puzzle-offset-y: -692px;
$puzzle-width: 256px;
$puzzle-height: 256px;
$puzzle-total-width: 512px;
$puzzle-total-height: 1460px;
$puzzle-image: '../img/sprite.png';
$puzzle: (0px, 692px, 0px, -692px, 256px, 256px, 512px, 1460px, '../img/sprite.png', 'puzzle', );
$puzzle-2x-name: 'puzzle@2x';
$puzzle-2x-x: 0px;
$puzzle-2x-y: 948px;
$puzzle-2x-offset-x: 0px;
$puzzle-2x-offset-y: -948px;
$puzzle-2x-width: 512px;
$puzzle-2x-height: 512px;
$puzzle-2x-total-width: 512px;
$puzzle-2x-total-height: 1460px;
$puzzle-2x-image: '../img/sprite.png';
$puzzle-2x: (0px, 948px, 0px, -948px, 512px, 512px, 512px, 1460px, '../img/sprite.png', 'puzzle@2x', );
$spritesheet-width: 512px;
$spritesheet-height: 1460px;
$spritesheet-image: '../img/sprite.png';
$spritesheet-sprites: ($paper-plane, $paper-plane-2x, $partners1, $partners2, $partners3, $partners4, $partners5, $puzzle, $puzzle-2x, );
$spritesheet: (512px, 1460px, '../img/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
